#pragma once

#include <nlohmann/json-schema.hpp>
#include "PluginStateManager.hpp"


class EmailListView;
/**
 * @brief Abstract base class for all plugins.
 *
 * This interface defines basic configuration, attribute handling, and state management for plugins.
 */
class PluginInterface {
public:
    /**
     * @brief Pure virtual destructor.
     *
     * Ensures that PluginInterface is abstract and properly cleans up derived objects.
     */
    virtual ~PluginInterface() = default;
    /**
     * @brief Generates a JSON representation of the instance hierarchy.
     *
     * This method prints a recursive tree of plugin instances.
     *
     * @return A JSON object representing the instance tree.
     */
    virtual nlohmann::json printRecursiveInstanceTreeJson() = 0;
    /**
     * @brief Generates a JSON representation of the instance hierarchy.
     *
     * This method prints a recursive tree of plugin instances.
     *
     * @return A JSON object representing the instance tree.
     */
    virtual bool instantiateRecursive() = 0;
    /**
     * @brief Executes all functionality of the plugin.
     *
     * Processes the provided EmailList, either using its functionality or executing its managed plugins if executor.
     *
     * @param emailList Pointer to the EmailList to process.
     * @return An integer status code (0 on success, non-zero on failure).
     */
    virtual bool execute(EmailListView * emailList) = 0;
    /**
     * @brief Retrieves the plugin's name.
     * @return The plugin name.
     */
    virtual std::string getPluginName();

    /**
     * @brief Retrieves the instance ID of the plugin.
     * @return The instance ID.
     */
     virtual std::string getInstanceID() const;

    /**
     * @brief Sets the plugin's configuration.
     * @param pluginConfig A JSON object containing configuration options.
     * @return true if successful, false if json invalid (or other caught error).
     */
    bool setConfig(const nlohmann::json& pluginConfig);

    /**
     * @brief Gets the current configuration.
     * @return A JSON object with the current configuration.
     */
    virtual nlohmann::json getConfig();

    /**
     * @brief Retrieves the JSON schema for plugin configuration.
     * @return A JSON object representing the configuration schema.
     */
     virtual nlohmann::json &getSchema();

    /**
     * @brief Gets the required input attributes for the plugin.
     * @return A vector of input attribute names.
     */
     virtual std::vector<std::string> getInputAttributes() const;

    /**
     * @brief Gets all output attributes generated by the plugin.
     * @return A vector containing both generated and input attribute names.
     */
     virtual std::vector<std::string> getOutputAttributes() const;

    /**
     * @brief Returns the current state of the plugin as a string.
     * @return A string representation of the plugin state.
     */
     virtual std::string getState() const;

protected:
    /**
     * @brief Protected constructor to prevent direct instantiation.
     */
    explicit PluginInterface(std::string  name) : pluginName_(std::move(name)) {}

    // Member variables
    std::string instanceID_;           ///< Unique instance ID assigned upon instantiation.
    std::string pluginName_;
    std::vector<std::string> inputAttributes_;    ///< Required attributes for the plugin.
    std::vector<std::string> generatedAttributes_; ///< Attributes generated by the plugin.
    nlohmann::json optionConfig_;      ///< Configuration options provided via JSON.
    nlohmann::json optionSchema_;
    PluginStateManager stateManager_;  ///< Manages plugin state transitions.
    std::vector<std::string> interfaces_implemented_ = {};

    /// Macro to update the state via the state manager.
    #define SET_PLUGIN_STATE(state) (stateManager_.transitionTo(state, __FILE__, __LINE__))

    /**
     * @brief Custom error handler for JSON Schema validation.
     *
     * Captures and logs errors during configuration validation.
     */
    class CustomErrorHandler final : public nlohmann::json_schema::basic_error_handler {
    public:
        /**
         * @brief Handles a validation error.
         * @param pointer A JSON pointer indicating where the error occurred.
         * @param instance The JSON instance that failed validation.
         * @param message The error message.
         */
        void error(const nlohmann::json_pointer<std::string>& pointer,
                   const nlohmann::json& instance,
                   const std::string& message) override;
    };

    /**
     * @brief Validates the plugin configuration against the JSON schema.
     * @return True if the configuration is valid, false otherwise.
     */
    virtual bool validateConfig();
};